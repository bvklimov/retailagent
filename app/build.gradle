apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-android'


android {
    final globalAlias = "retail"
    final globalPass = "kbv123"
    def globalConfiguration = rootProject.ext
    def bundleId = globalConfiguration["projectId"]

    Properties versionProps = new Properties()
    def versionPropsFile = file("${project.projectDir.absolutePath}/../version.properties")
    def verCode, verName, code
    if (versionPropsFile.exists()) {
        versionProps.load(new FileInputStream(versionPropsFile))
        def major = versionProps['VERSION_MAJOR']
        def minor = versionProps['VERSION_MINOR']
        def rev = versionProps['VERSION_REVISION']
        code = versionProps['VERSION_BUILD']
        verCode = (code ?: globalConfiguration["projectCode"]).toInteger()
        if (verCode == 0) {
            verCode = globalConfiguration["projectCode"]
        }
        if (major == null || minor == null || rev == null) {
            verName = globalConfiguration["projectVersion"]
        } else {
            verName = "${major}.${minor}.${rev}"
        }
    } else {
        verCode = globalConfiguration["projectCode"]
        verName = globalConfiguration["projectVersion"]
    }

    compileSdkVersion globalConfiguration["sdkVersion"]
    buildToolsVersion globalConfiguration["buildToolsVersion"]
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion globalConfiguration["minSdkVersion"]
        targetSdkVersion globalConfiguration["sdkVersion"]
        versionCode verCode
//        vectorDrawables.useSupportLibrary = true
        resConfigs "en"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        stage {
            storeFile file("${project.projectDir.absolutePath}/../retail_stage.jks")
            storePassword = globalPass
            keyAlias = globalAlias
            keyPassword = globalPass
        }
        demo {
            storeFile file("${project.projectDir.absolutePath}/../retail_demo.jks")
            storePassword = globalPass
            keyAlias = globalAlias
            keyPassword = globalPass
        }
        prod {
            storeFile file("${project.projectDir.absolutePath}/../retail.jks")
            storePassword = globalPass
            keyAlias = globalAlias
            keyPassword = globalPass
        }
    }

    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-debug"
            ext.enableCrashlytics = false
            dexOptions {
                preDexLibraries true
                maxProcessCount 4
            }
            aaptOptions {
                cruncherEnabled false
            }
//            ndk {
//                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
//            }
        }
        release {
//            ext.enableCrashlytics = true
//            ext.betaDistributionReleaseNotesFilePath = "release_notes.txt"
//            ext.betaDistributionEmailsFilePath = "distribution.properties"
            multiDexEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    productFlavors {
        stage {
            applicationId "${bundleId}.stage"
            versionName verName + ".${code}-stage"
            signingConfig signingConfigs.stage
        }
        demo {
            applicationId "${bundleId}.demo"
            versionName verName + ".${code}-demo"
            signingConfig signingConfigs.demo
        }
        prod {
            applicationId bundleId
            versionName verName
            signingConfig signingConfigs.prod
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.contains(":app:assembleProdRelease")
            reset()
            include 'armeabi-v7a', 'arm64-v8a'
            universalApk false
        }
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        resValue 'string', 'app_id', variant.applicationId
    }
}

configurations {
    stageDebugCompile
    stageReleaseCompile
    demoDebugCompile
    demoReleaseCompile
    prodDebugCompile
    prodReleaseCompile
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:multidex:$rootProject.ext.multidex"

    compile "com.android.support:support-compat:$rootProject.ext.androidSupport"
    compile "com.android.support:appcompat-v7:$rootProject.ext.androidSupport"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.androidSupport"
    compile "com.android.support:cardview-v7:$rootProject.ext.androidSupport"
    compile "com.android.support:support-annotations:$rootProject.ext.androidSupport"
    compile "com.android.support.constraint:constraint-layout:$rootProject.ext.androidConstraint"

    compile "com.google.firebase:firebase-core:$rootProject.ext.playServices"
    compile "com.google.firebase:firebase-auth:$rootProject.ext.playServices"

    compile "net.sourceforge.streamsupport:streamsupport:$rootProject.ext.streams"
    compile "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxAndroid"
    compile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxJava"
    compile "com.jakewharton.rxbinding2:rxbinding:$rootProject.ext.rxBinding"
    compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rootProject.ext.rxBinding"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.ext.dagger"
    compile "com.google.dagger:dagger:$rootProject.ext.dagger"
    provided "javax.annotation:jsr250-api:$rootProject.ext.jsr250"
    compile "com.jakewharton:butterknife:$rootProject.ext.butterknife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterknife"
    compile "com.hannesdorfmann.mosby3:mvp:$rootProject.ext.mosby"
    compile "com.hannesdorfmann.mosby3:viewstate:$rootProject.ext.mosby"
    compile "com.hannesdorfmann.mosby3:mvp-nullobject-presenter:$rootProject.ext.mosby"

    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttp"
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okhttp"
    compile "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit"
    compile "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofit"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofit"
    compile "com.github.bumptech.glide:glide:$rootProject.ext.glide"
    compile "com.github.bumptech.glide:okhttp3-integration:$rootProject.ext.glideIntegration"
    compile "com.jakewharton.threetenabp:threetenabp:$rootProject.ext.threetenabp"

    provided "org.projectlombok:lombok:$rootProject.ext.lombok"
    annotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombok"

    compile "org.parceler:parceler-api:$rootProject.ext.parceler"
    annotationProcessor "org.parceler:parceler:$rootProject.ext.parceler"

    compile "com.jakewharton.timber:timber:$rootProject.ext.timber"

    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinStdLib"
    androidTestCompile "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinStdLib"
    compile 'com.android.support:design:26.+'
}

apply plugin: 'com.google.gms.google-services'